// Generated by gencpp from file kobuki_project/Status.msg
// DO NOT EDIT!


#ifndef KOBUKI_PROJECT_MESSAGE_STATUS_H
#define KOBUKI_PROJECT_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kobuki_project
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : x(0.0)
    , y(0.0)
    , left(false)
    , front(false)
    , right(false)
    , power(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , left(false)
    , front(false)
    , right(false)
    , power(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef uint8_t _left_type;
  _left_type left;

   typedef uint8_t _front_type;
  _front_type front;

   typedef uint8_t _right_type;
  _right_type right;

   typedef uint32_t _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::kobuki_project::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_project::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::kobuki_project::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::kobuki_project::Status > StatusPtr;
typedef boost::shared_ptr< ::kobuki_project::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kobuki_project::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kobuki_project::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kobuki_project

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'kobuki_project': ['/home/jay/catkin_ws/src/kobuki_project/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_project::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_project::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_project::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_project::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_project::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_project::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kobuki_project::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2b13e0be7f646a991aebf8dd021b595";
  }

  static const char* value(const ::kobuki_project::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2b13e0be7f646a9ULL;
  static const uint64_t static_value2 = 0x91aebf8dd021b595ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_project::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kobuki_project/Status";
  }

  static const char* value(const ::kobuki_project::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kobuki_project::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x     # X position\n\
float32 y     # Y position\n\
bool left     # left bumper\n\
bool front    # front bumper\n\
bool right    # right bumper\n\
uint32 power  # power system state: 0: unplugged, 1: plugged to adapter, 2: plugged to dock, 3: charged, 4: battery_low, 5: battery_critical \n\
";
  }

  static const char* value(const ::kobuki_project::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kobuki_project::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.left);
      stream.next(m.front);
      stream.next(m.right);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_project::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kobuki_project::Status_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.front);
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "power: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KOBUKI_PROJECT_MESSAGE_STATUS_H
